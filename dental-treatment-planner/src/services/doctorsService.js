/**
 * Service pour la gestion des m√©decins dans Firestore
 */
import { collection, doc, getDocs, addDoc, updateDoc, deleteDoc, onSnapshot, serverTimestamp, query, where } from 'firebase/firestore';
import { getDb } from '../config/firebase';
import Resizer from "react-image-file-resizer";

/**
 * Redimensionner une image √† une taille maximale avec react-image-file-resizer
 * @param {File} file - Fichier image √† redimensionner
 * @param {number} maxSize - Taille maximale (largeur et hauteur)
 * @param {number} quality - Qualit√© de compression (0-100)
 * @returns {Promise<string>} String base64 de l'image redimensionn√©e
 */
const resizeImage = (file, maxSize = 1024, quality = 80) => {
  return new Promise((resolve, reject) => {
    console.log(`üîß D√©but redimensionnement avec react-image-file-resizer`);
    console.log(`üìÇ Fichier: ${file.name}, Taille: ${file.size} bytes`);
    console.log(`üéØ Param√®tres: ${maxSize}x${maxSize}, qualit√©: ${quality}%`);
    
    try {
      Resizer.imageFileResizer(
        file,                    // fichier image
        maxSize,                 // largeur max
        maxSize,                 // hauteur max
        'JPEG',                  // format de compression
        quality,                 // qualit√© (0-100)
        0,                       // rotation (0¬∞)
        (resizedImage) => {      // callback de succ√®s
          console.log(`‚úÖ Redimensionnement r√©ussi`);
          console.log(`üì¶ Taille finale: ${resizedImage.length} chars`);
          console.log(`üìâ Compression: ${((1 - resizedImage.length / file.size) * 100).toFixed(1)}%`);
          resolve(resizedImage);
        },
        'base64',                // type de sortie
        200,                     // largeur min
        200                      // hauteur min
      );
    } catch (error) {
      console.error('‚ùå Erreur lors du redimensionnement:', error);
      reject(new Error(`Erreur lors du redimensionnement: ${error.message}`));
    }
  });
};

/**
 * Convertir un fichier en base64 pour le stockage (version simple)
 * @param {File} file - Fichier √† convertir
 * @returns {Promise<string>} String base64
 */
const fileToBase64 = (file) => {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.readAsDataURL(file);
    reader.onload = () => resolve(reader.result);
    reader.onerror = error => reject(error);
  });
};

class DoctorsService {
  constructor() {
    this.collection = 'doctors';
  }

  /**
   * Obtenir tous les m√©decins d'un utilisateur
   * @param {string} userId - ID de l'utilisateur
   * @returns {Promise<Array>} Liste des m√©decins
   */
  async getDoctors(userId) {
    try {
      console.log('üîç [DEBUG] getDoctors pour userId:', userId);
      const db = getDb();
      console.log('üîç [DEBUG] DB obtenue:', !!db);
      
      const doctorsRef = collection(db, this.collection);
      console.log('üîç [DEBUG] Collection ref cr√©√©e pour:', this.collection);
      
      // DIAGNOSTIC: Comparaison des userId
      console.log('üîç [DEBUG] üìã R√©cup√©ration des m√©decins pour userId actuel:', userId);
      
      // V√©rifier si l'userId actuel correspond aux m√©decins existants
      const allDocsSnapshot = await getDocs(doctorsRef);
      let hasMatchingUserId = false;
      allDocsSnapshot.forEach((doc) => {
        const data = doc.data();
        if (data.userId === userId) {
          hasMatchingUserId = true;
        }
        console.log(`üîç [DEBUG] üë®‚Äç‚öïÔ∏è M√©decin ${doc.id}: userId="${data.userId}", name="${data.name}" ${data.userId === userId ? '‚úÖ MATCH' : '‚ùå NO MATCH'}`);
      });
      
      console.log(`üîç [DEBUG] üìã UserId actuel: "${userId}"`);
      console.log(`üîç [DEBUG] üìã M√©decins trouv√©s pour cet utilisateur: ${hasMatchingUserId ? 'OUI' : 'NON'}`);
      
      if (!hasMatchingUserId) {
        console.warn('‚ö†Ô∏è [MISMATCH] Aucun m√©decin ne correspond √† l\'userId actuel!');
        console.warn('‚ö†Ô∏è [MISMATCH] Solution temporaire: Attribution des m√©decins existants √† cet utilisateur');
        
        // CORRECTION TEMPORAIRE: Attribuer tous les m√©decins √† l'utilisateur actuel
        const updatePromises = [];
        allDocsSnapshot.forEach((doc) => {
          const docRef = doc.ref;
          updatePromises.push(updateDoc(docRef, { userId: userId }));
        });
        
        if (updatePromises.length > 0) {
          await Promise.all(updatePromises);
          console.log('‚úÖ [CORRECTION] M√©decins r√©attribu√©s √† l\'utilisateur actuel');
        }
      }
      
      const q = query(doctorsRef, where('userId', '==', userId));
      
      console.log('üîç [DEBUG] Avant getDocs...');
      const snapshot = await getDocs(q);
      console.log('üîç [DEBUG] üìÑ Snapshot re√ßu, nombre de docs:', snapshot.size);
      console.log('üîç [DEBUG] Snapshot empty:', snapshot.empty);
      
      const doctors = [];
      snapshot.forEach((doc) => {
        const data = doc.data();
        console.log('üîç [DEBUG] üë®‚Äç‚öïÔ∏è M√©decin trouv√©:', doc.id, data);
        doctors.push({
          id: doc.id,
          ...data,
          createdAt: data.createdAt?.toDate?.() || new Date(),
          updatedAt: data.updatedAt?.toDate?.() || new Date()
        });
      });
      
      console.log('üîç [DEBUG] Doctors array avant tri:', doctors);
      const sortedDoctors = doctors.sort((a, b) => (a.name || '').localeCompare(b.name || ''));
      console.log('üîç [DEBUG] ‚úÖ M√©decins tri√©s:', sortedDoctors);
      return sortedDoctors;
    } catch (error) {
      console.error('üîç [DEBUG] ‚ùå Erreur lors de la r√©cup√©ration des m√©decins:', error);
      console.error('üîç [DEBUG] ‚ùå Error code:', error.code);
      console.error('üîç [DEBUG] ‚ùå Error message:', error.message);
      throw new Error(`Impossible de r√©cup√©rer les m√©decins: ${error.message}`);
    }
  }

  /**
   * Ajouter un nouveau m√©decin
   * @param {string} userId - ID de l'utilisateur
   * @param {Object} doctorData - Donn√©es du m√©decin
   * @returns {Promise<Object>} M√©decin cr√©√©
   */
  async addDoctor(userId, doctorData) {
    try {
      console.log('üë®‚Äç‚öïÔ∏è Ajout m√©decin avec donn√©es:', doctorData);
      const db = getDb();
      const doctorsRef = collection(db, this.collection);
      
      // Traiter l'image de profil si pr√©sente
      let profileImageData = null;
      if (doctorData.profileImage && doctorData.profileImage instanceof File) {
        console.log('üì∏ Redimensionnement et conversion de l\'image...');
        console.log('üìè Taille originale:', doctorData.profileImage.size, 'bytes');
        
        // Redimensionner l'image √† 1024x1024 max avec qualit√© 80%
        profileImageData = await resizeImage(doctorData.profileImage, 1024, 80);
        console.log('‚úÖ Image redimensionn√©e et convertie, taille finale:', profileImageData.length, 'chars');
      }
      
      const newDoctor = {
        name: doctorData.name,
        treatmentPhases: doctorData.treatmentPhases,
        profileImage: profileImageData, // Stocker en base64
        userId: userId,
        createdAt: serverTimestamp(),
        updatedAt: serverTimestamp()
      };
      
      console.log('üíæ Sauvegarde m√©decin dans Firestore...');
      const docRef = await addDoc(doctorsRef, newDoctor);
      
      const result = {
        id: docRef.id,
        ...newDoctor,
        createdAt: new Date(),
        updatedAt: new Date()
      };
      
      console.log('‚úÖ M√©decin ajout√© avec succ√®s:', result);
      return result;
    } catch (error) {
      console.error('Erreur lors de l\'ajout du m√©decin:', error);
      throw new Error(`Impossible d'ajouter le m√©decin: ${error.message}`);
    }
  }

  /**
   * Mettre √† jour un m√©decin
   * @param {string} doctorId - ID du m√©decin
   * @param {Object} updates - Donn√©es √† mettre √† jour
   * @returns {Promise<Object>} M√©decin mis √† jour
   */
  async updateDoctor(doctorId, updates) {
    try {
      const db = getDb();
      const doctorRef = doc(db, this.collection, doctorId);
      
      const updateData = {
        ...updates,
        updatedAt: serverTimestamp()
      };
      
      await updateDoc(doctorRef, updateData);
      
      return {
        id: doctorId,
        ...updates,
        updatedAt: new Date()
      };
    } catch (error) {
      console.error('Erreur lors de la mise √† jour du m√©decin:', error);
      throw new Error(`Impossible de mettre √† jour le m√©decin: ${error.message}`);
    }
  }

  /**
   * Supprimer un m√©decin
   * @param {string} doctorId - ID du m√©decin
   * @returns {Promise<void>}
   */
  async deleteDoctor(doctorId) {
    try {
      const db = getDb();
      const doctorRef = doc(db, this.collection, doctorId);
      await deleteDoc(doctorRef);
    } catch (error) {
      console.error('Erreur lors de la suppression du m√©decin:', error);
      throw new Error(`Impossible de supprimer le m√©decin: ${error.message}`);
    }
  }

  /**
   * √âcouter les changements des m√©decins en temps r√©el
   * @param {string} userId - ID de l'utilisateur
   * @param {Function} callback - Fonction appel√©e lors des changements
   * @returns {Function} Fonction pour arr√™ter l'√©coute
   */
  subscribeToDoctors(userId, callback) {
    try {
      console.log('üî• subscribeToDoctors pour userId:', userId);
      const db = getDb();
      const doctorsRef = collection(db, this.collection);
      
      // Utiliser une requ√™te filtr√©e pour l'√©coute temps r√©el
      const q = query(doctorsRef, where('userId', '==', userId));
      console.log('üî• Requ√™te temps r√©el cr√©√©e avec where userId ==', userId);
      
      return onSnapshot(
        q,
        (snapshot) => {
          console.log('üî• Snapshot temps r√©el re√ßu, nombre de docs:', snapshot.size);
          const doctors = [];
          snapshot.forEach((doc) => {
            const data = doc.data();
            console.log('üî• M√©decin temps r√©el:', doc.id, data);
            doctors.push({
              id: doc.id,
              ...data,
              createdAt: data.createdAt?.toDate?.() || new Date(),
              updatedAt: data.updatedAt?.toDate?.() || new Date()
            });
          });
          
          const sortedDoctors = doctors.sort((a, b) => (a.name || '').localeCompare(b.name || ''));
          console.log('üî• M√©decins temps r√©el tri√©s:', sortedDoctors);
          callback(sortedDoctors);
        },
        (error) => {
          console.error('Erreur lors de l\'√©coute des m√©decins:', error);
          callback([]);
        }
      );
    } catch (error) {
      console.error('Erreur lors de la cr√©ation de l\'√©coute:', error);
      callback([]);
      return () => {}; // Retourner une fonction vide pour √©viter les erreurs
    }
  }

  /**
   * Valider les donn√©es d'un m√©decin
   * @param {Object} doctorData - Donn√©es √† valider
   * @returns {Object} R√©sultat de la validation
   */
  validateDoctor(doctorData) {
    const errors = [];
    
    if (!doctorData.name || doctorData.name.trim().length < 2) {
      errors.push('Le nom doit contenir au moins 2 caract√®res');
    }
    
    if (!doctorData.treatmentPhases || doctorData.treatmentPhases.length === 0) {
      errors.push('Au moins une phase de traitement doit √™tre s√©lectionn√©e');
    }
    
    if (doctorData.treatmentPhases && doctorData.treatmentPhases.some(phase => ![1, 2, 3].includes(phase))) {
      errors.push('Les phases de traitement doivent √™tre 1, 2 ou 3');
    }
    
    return {
      isValid: errors.length === 0,
      errors
    };
  }

  /**
   * Obtenir les phases de traitement disponibles
   * @returns {Array} Liste des phases
   */
  getTreatmentPhases() {
    return [
      { id: 1, name: 'Phase 1 - Pr√©paration', description: 'Examens et pr√©paration' },
      { id: 2, name: 'Phase 2 - Traitement', description: 'Traitement principal' },
      { id: 3, name: 'Phase 3 - Finalisation', description: 'Finition et suivi' }
    ];
  }
}

// Exporter une instance unique du service
export default new DoctorsService();