/**
 * Hook pour g√©rer les plans de traitement
 */
import { useState, useEffect, useCallback } from 'react';
import { useAuth } from '../contexts/AuthContext';
import treatmentPlansService from '../services/treatmentPlansService';

export const useTreatmentPlans = () => {
  const { user } = useAuth();
  const [treatmentPlans, setTreatmentPlans] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  // Charger les plans de traitement
  const loadTreatmentPlans = useCallback(async () => {
    if (!user?.uid) {
      setTreatmentPlans([]);
      setLoading(false);
      return;
    }

    try {
      setLoading(true);
      setError(null);
      console.log('ü¶∑ Chargement des plans de traitement pour:', user.uid);
      
      const plans = await treatmentPlansService.getTreatmentPlans(user.uid);
      console.log('‚úÖ Plans de traitement charg√©s:', plans.length);
      
      setTreatmentPlans(plans);
    } catch (err) {
      console.error('‚ùå Erreur lors du chargement des plans:', err);
      setError(err.message);
      setTreatmentPlans([]);
    } finally {
      setLoading(false);
    }
  }, [user?.uid]);

  // Charger les plans au montage et quand l'utilisateur change
  useEffect(() => {
    loadTreatmentPlans();
  }, [loadTreatmentPlans]);

  // Ajouter un plan de traitement
  const addTreatmentPlan = useCallback(async (planData) => {
    if (!user?.uid) {
      throw new Error('Utilisateur non connect√©');
    }

    try {
      console.log('‚ûï Ajout d\'un nouveau plan de traitement');
      const newPlan = await treatmentPlansService.addTreatmentPlan(user.uid, planData);
      
      setTreatmentPlans(prev => [newPlan, ...prev]);
      console.log('‚úÖ Plan de traitement ajout√©:', newPlan.id);
      
      return newPlan;
    } catch (err) {
      console.error('‚ùå Erreur lors de l\'ajout du plan:', err);
      throw err;
    }
  }, [user?.uid]);

  // Mettre √† jour un plan de traitement
  const updateTreatmentPlan = useCallback(async (planId, updates) => {
    try {
      console.log('üìù Mise √† jour du plan:', planId);
      const updatedPlan = await treatmentPlansService.updateTreatmentPlan(planId, updates);
      
      setTreatmentPlans(prev => 
        prev.map(plan => plan.id === planId ? { ...plan, ...updatedPlan } : plan)
      );
      
      console.log('‚úÖ Plan mis √† jour:', planId);
      return updatedPlan;
    } catch (err) {
      console.error('‚ùå Erreur lors de la mise √† jour:', err);
      throw err;
    }
  }, []);

  // Supprimer un plan de traitement
  const deleteTreatmentPlan = useCallback(async (planId) => {
    try {
      console.log('üóëÔ∏è Suppression du plan:', planId);
      await treatmentPlansService.deleteTreatmentPlan(planId);
      
      setTreatmentPlans(prev => prev.filter(plan => plan.id !== planId));
      console.log('‚úÖ Plan supprim√©:', planId);
    } catch (err) {
      console.error('‚ùå Erreur lors de la suppression:', err);
      throw err;
    }
  }, []);

  // Obtenir un plan sp√©cifique
  const getTreatmentPlan = useCallback(async (planId) => {
    try {
      console.log('üîç R√©cup√©ration du plan:', planId);
      const plan = await treatmentPlansService.getTreatmentPlan(planId);
      console.log('‚úÖ Plan r√©cup√©r√©:', plan.planNumber);
      return plan;
    } catch (err) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration:', err);
      throw err;
    }
  }, []);

  // Obtenir les plans d'un patient
  const getTreatmentPlansByPatient = useCallback(async (patientId) => {
    try {
      console.log('üîç R√©cup√©ration des plans pour le patient:', patientId);
      const plans = await treatmentPlansService.getTreatmentPlansByPatient(patientId);
      console.log('‚úÖ Plans du patient r√©cup√©r√©s:', plans.length);
      return plans;
    } catch (err) {
      console.error('‚ùå Erreur lors de la r√©cup√©ration des plans du patient:', err);
      throw err;
    }
  }, []);

  // Cr√©er un plan depuis un devis
  const createFromQuote = useCallback(async (quote) => {
    if (!user?.uid) {
      throw new Error('Utilisateur non connect√©');
    }

    try {
      console.log('üí∞‚û°Ô∏èü¶∑ Cr√©ation d\'un plan depuis le devis:', quote.quoteNumber);
      const newPlan = await treatmentPlansService.createFromQuote(user.uid, quote);
      
      setTreatmentPlans(prev => [newPlan, ...prev]);
      console.log('‚úÖ Plan cr√©√© depuis devis:', newPlan.id);
      
      return newPlan;
    } catch (err) {
      console.error('‚ùå Erreur lors de la cr√©ation depuis devis:', err);
      throw err;
    }
  }, [user?.uid]);

  // D√©marrer un plan de traitement
  const startTreatmentPlan = useCallback(async (planId) => {
    try {
      console.log('‚ñ∂Ô∏è D√©marrage du plan:', planId);
      const updatedPlan = await treatmentPlansService.startTreatmentPlan(planId);
      
      setTreatmentPlans(prev => 
        prev.map(plan => plan.id === planId ? { ...plan, ...updatedPlan } : plan)
      );
      
      console.log('‚úÖ Plan d√©marr√©:', planId);
      return updatedPlan;
    } catch (err) {
      console.error('‚ùå Erreur lors du d√©marrage:', err);
      throw err;
    }
  }, []);

  // Terminer un plan de traitement
  const completeTreatmentPlan = useCallback(async (planId) => {
    try {
      console.log('‚úÖ Finalisation du plan:', planId);
      const updatedPlan = await treatmentPlansService.completeTreatmentPlan(planId);
      
      setTreatmentPlans(prev => 
        prev.map(plan => plan.id === planId ? { ...plan, ...updatedPlan } : plan)
      );
      
      console.log('‚úÖ Plan termin√©:', planId);
      return updatedPlan;
    } catch (err) {
      console.error('‚ùå Erreur lors de la finalisation:', err);
      throw err;
    }
  }, []);

  return {
    treatmentPlans,
    loading,
    error,
    loadTreatmentPlans,
    addTreatmentPlan,
    updateTreatmentPlan,
    deleteTreatmentPlan,
    getTreatmentPlan,
    getTreatmentPlansByPatient,
    createFromQuote,
    startTreatmentPlan,
    completeTreatmentPlan
  };
};