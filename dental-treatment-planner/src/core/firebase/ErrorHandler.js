/**
 * Gestionnaire d'erreurs centralis√© pour Firebase
 * G√®re les retry, fallbacks et logging uniforme
 */

class ErrorHandler {
  constructor() {
    this.retryStrategies = new Map();
    this.fallbackStrategies = new Map();
    this.maxRetries = 3;
    this.baseDelay = 1000; // 1 seconde
  }

  /**
   * G√©rer une erreur avec retry automatique et fallbacks
   * @param {Error} error - L'erreur √† g√©rer
   * @param {Function} operation - L'op√©ration √† retry
   * @param {Object} context - Contexte de l'op√©ration
   * @returns {Promise<any>} R√©sultat de l'op√©ration ou fallback
   */
  async handle(error, operation, context = {}) {
    console.error('üö® ErrorHandler - Gestion d\'erreur:', {
      error: error.message,
      code: error.code,
      context
    });

    // Retry automatique pour erreurs r√©seau
    if (this.isNetworkError(error)) {
      console.log('üîÑ Tentative de retry pour erreur r√©seau...');
      return this.retryWithBackoff(operation, context);
    }
    
    // Gestion sp√©ciale pour erreurs QUIC (probl√®me connu Firebase)
    if (this.isQuicError(error)) {
      console.log('üåê Gestion erreur QUIC - retry avec d√©lai...');
      return this.retryWithBackoff(operation, context, 2000);
    }
    
    // Fallback pour erreurs de quota
    if (this.isQuotaError(error)) {
      console.log('üìä Erreur de quota - utilisation du fallback...');
      return this.useFallbackStrategy(context);
    }
    
    // Gestion des erreurs de permissions
    if (this.isPermissionError(error)) {
      console.log('üîí Erreur de permissions d√©tect√©e');
      throw this.createUserFriendlyError('Permissions insuffisantes', error);
    }
    
    // Logging uniforme pour toutes les erreurs
    this.logError(error, context);
    
    // Normaliser l'erreur pour l'utilisateur
    throw this.normalizeError(error);
  }

  /**
   * Retry avec backoff exponentiel
   * @param {Function} operation - Op√©ration √† retry
   * @param {Object} context - Contexte
   * @param {number} initialDelay - D√©lai initial
   * @returns {Promise<any>}
   */
  async retryWithBackoff(operation, context = {}, initialDelay = this.baseDelay) {
    let lastError;
    
    for (let attempt = 1; attempt <= this.maxRetries; attempt++) {
      try {
        console.log(`üîÑ Tentative ${attempt}/${this.maxRetries}...`);
        
        if (attempt > 1) {
          const delay = initialDelay * Math.pow(2, attempt - 1);
          console.log(`‚è≥ Attente de ${delay}ms avant retry...`);
          await this.sleep(delay);
        }
        
        const result = await operation();
        console.log(`‚úÖ Succ√®s apr√®s ${attempt} tentative(s)`);
        return result;
        
      } catch (error) {
        lastError = error;
        console.log(`‚ùå Tentative ${attempt} √©chou√©e:`, error.message);
        
        // Si ce n'est plus une erreur r√©seau, arr√™ter les retry
        if (!this.isRetryableError(error)) {
          console.log('üõë Erreur non-retryable, arr√™t des tentatives');
          break;
        }
      }
    }
    
    console.log('üí• Toutes les tentatives ont √©chou√©');
    throw lastError;
  }

  /**
   * Utiliser une strat√©gie de fallback
   * @param {Object} context - Contexte de l'op√©ration
   * @returns {any} R√©sultat du fallback
   */
  useFallbackStrategy(context) {
    const { operation, collection } = context;
    
    // Fallback pour lecture : retourner cache ou donn√©es vides
    if (operation === 'read' || operation === 'list') {
      console.log('üìã Fallback: retour de donn√©es vides');
      return [];
    }
    
    // Fallback pour √©criture : mise en queue locale
    if (operation === 'write' || operation === 'update') {
      console.log('üíæ Fallback: mise en queue pour retry ult√©rieur');
      this.queueForLaterRetry(context);
      return { success: false, queued: true };
    }
    
    throw new Error('Aucune strat√©gie de fallback disponible');
  }

  /**
   * Mettre en queue pour retry ult√©rieur
   * @param {Object} context - Contexte de l'op√©ration
   */
  queueForLaterRetry(context) {
    // TODO: Impl√©menter une queue persistante pour les op√©rations √©chou√©es
    console.log('üìù Op√©ration mise en queue:', context);
  }

  /**
   * V√©rifier si c'est une erreur r√©seau
   * @param {Error} error - L'erreur √† v√©rifier
   * @returns {boolean}
   */
  isNetworkError(error) {
    const networkCodes = [
      'unavailable',
      'deadline-exceeded',
      'network-error',
      'timeout'
    ];
    
    const networkMessages = [
      'network error',
      'connection failed',
      'timeout',
      'unavailable'
    ];
    
    return networkCodes.includes(error.code) ||
           networkMessages.some(msg => error.message.toLowerCase().includes(msg));
  }

  /**
   * V√©rifier si c'est une erreur QUIC
   * @param {Error} error - L'erreur √† v√©rifier
   * @returns {boolean}
   */
  isQuicError(error) {
    return error.message && error.message.includes('QUIC_PROTOCOL_ERROR');
  }

  /**
   * V√©rifier si c'est une erreur de quota
   * @param {Error} error - L'erreur √† v√©rifier
   * @returns {boolean}
   */
  isQuotaError(error) {
    const quotaCodes = ['resource-exhausted', 'quota-exceeded'];
    return quotaCodes.includes(error.code) ||
           (error.message && error.message.includes('quota'));
  }

  /**
   * V√©rifier si c'est une erreur de permissions
   * @param {Error} error - L'erreur √† v√©rifier
   * @returns {boolean}
   */
  isPermissionError(error) {
    const permissionCodes = ['permission-denied', 'unauthenticated'];
    return permissionCodes.includes(error.code);
  }

  /**
   * V√©rifier si l'erreur est retryable
   * @param {Error} error - L'erreur √† v√©rifier
   * @returns {boolean}
   */
  isRetryableError(error) {
    return this.isNetworkError(error) || this.isQuicError(error);
  }

  /**
   * Logger une erreur de mani√®re uniforme
   * @param {Error} error - L'erreur √† logger
   * @param {Object} context - Contexte de l'erreur
   */
  logError(error, context) {
    const errorInfo = {
      timestamp: new Date().toISOString(),
      message: error.message,
      code: error.code,
      stack: error.stack,
      context: context,
      userAgent: navigator.userAgent,
      url: window.location.href
    };
    
    console.error('üö® Firebase Error Log:', errorInfo);
    
    // TODO: Envoyer √† un service de monitoring (Sentry, LogRocket, etc.)
  }

  /**
   * Normaliser une erreur pour l'utilisateur
   * @param {Error} error - L'erreur √† normaliser
   * @returns {Error} Erreur normalis√©e
   */
  normalizeError(error) {
    // Messages d'erreur conviviaux
    const friendlyMessages = {
      'permission-denied': 'Vous n\'avez pas les permissions n√©cessaires pour cette action',
      'unauthenticated': 'Vous devez √™tre connect√© pour effectuer cette action',
      'not-found': 'Les donn√©es demand√©es n\'ont pas √©t√© trouv√©es',
      'already-exists': 'Ces donn√©es existent d√©j√†',
      'resource-exhausted': 'Service temporairement indisponible, veuillez r√©essayer',
      'unavailable': 'Service temporairement indisponible, veuillez r√©essayer',
      'deadline-exceeded': 'L\'op√©ration a pris trop de temps, veuillez r√©essayer'
    };
    
    const friendlyMessage = friendlyMessages[error.code] || 
                           'Une erreur inattendue s\'est produite';
    
    return this.createUserFriendlyError(friendlyMessage, error);
  }

  /**
   * Cr√©er une erreur conviviale pour l'utilisateur
   * @param {string} message - Message convivial
   * @param {Error} originalError - Erreur originale
   * @returns {Error}
   */
  createUserFriendlyError(message, originalError) {
    const error = new Error(message);
    error.code = originalError.code;
    error.originalError = originalError;
    error.isUserFriendly = true;
    return error;
  }

  /**
   * Utilitaire pour attendre
   * @param {number} ms - Millisecondes √† attendre
   * @returns {Promise<void>}
   */
  sleep(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}

// Exporter une instance unique
export default new ErrorHandler();