/**
 * Service des m√©decins refactoris√© avec la nouvelle couche d'abstraction
 * Version 2.0 - Utilise BaseRepository pour √©liminer la redondance
 */
import { BaseRepository, BaseSchema, ValidationTypes } from '../../core/firebase';
import Resizer from "react-image-file-resizer";

// Sch√©ma de validation pour les m√©decins
const DoctorSchema = new BaseSchema({
  name: [ValidationTypes.REQUIRED, ValidationTypes.STRING],
  treatmentPhases: [ValidationTypes.REQUIRED, ValidationTypes.ARRAY],
  profileImage: ValidationTypes.STRING, // Optionnel
  // Validation personnalis√©e pour les phases de traitement
  treatmentPhases: (value) => {
    if (!Array.isArray(value) || value.length === 0) {
      return 'Au moins une phase de traitement doit √™tre s√©lectionn√©e';
    }
    
    const validPhases = [1, 2, 3];
    const invalidPhases = value.filter(phase => !validPhases.includes(phase));
    
    if (invalidPhases.length > 0) {
      return 'Les phases de traitement doivent √™tre 1, 2 ou 3';
    }
    
    return true;
  }
});

class DoctorsServiceV2 extends BaseRepository {
  constructor() {
    super('doctors', DoctorSchema);
    console.log('üë®‚Äç‚öïÔ∏è DoctorsServiceV2 initialis√© avec BaseRepository');
  }

  /**
   * Obtenir tous les m√©decins d'un utilisateur
   * @param {string} userId - ID de l'utilisateur
   * @param {Object} filters - Filtres optionnels
   * @returns {Promise<Array>} Liste des m√©decins
   */
  async getDoctors(userId, filters = {}) {
    console.log('üë®‚Äç‚öïÔ∏è getDoctors V2 pour userId:', userId);
    
    // Utiliser la m√©thode h√©rit√©e de BaseRepository
    const doctors = await this.findAll(userId, filters);
    
    // Tri sp√©cifique aux m√©decins par nom
    doctors.sort((a, b) => (a.name || '').localeCompare(b.name || ''));
    
    console.log('‚úÖ M√©decins r√©cup√©r√©s V2:', doctors.length);
    return doctors;
  }

  /**
   * Ajouter un nouveau m√©decin
   * @param {string} userId - ID de l'utilisateur
   * @param {Object} doctorData - Donn√©es du m√©decin
   * @returns {Promise<Object>} M√©decin cr√©√©
   */
  async addDoctor(userId, doctorData) {
    console.log('üë®‚Äç‚öïÔ∏è Ajout m√©decin V2 avec donn√©es:', doctorData);
    
    // Traiter l'image de profil si pr√©sente
    let processedData = { ...doctorData };
    
    if (doctorData.profileImage && doctorData.profileImage instanceof File) {
      console.log('üì∏ Traitement de l\'image de profil...');
      processedData.profileImage = await this.processProfileImage(doctorData.profileImage);
    }
    
    // Utiliser la m√©thode h√©rit√©e de BaseRepository (avec validation automatique)
    const newDoctor = await this.create(userId, processedData);
    
    console.log('‚úÖ M√©decin ajout√© V2:', newDoctor.id);
    return newDoctor;
  }

  /**
   * Mettre √† jour un m√©decin
   * @param {string} doctorId - ID du m√©decin
   * @param {Object} updates - Donn√©es √† mettre √† jour
   * @param {string} userId - ID de l'utilisateur (pour le cache)
   * @returns {Promise<Object>} M√©decin mis √† jour
   */
  async updateDoctor(doctorId, updates, userId = null) {
    console.log('üë®‚Äç‚öïÔ∏è Mise √† jour m√©decin V2:', doctorId);
    
    // Traiter l'image de profil si pr√©sente dans les updates
    let processedUpdates = { ...updates };
    
    if (updates.profileImage && updates.profileImage instanceof File) {
      console.log('üì∏ Traitement de la nouvelle image de profil...');
      processedUpdates.profileImage = await this.processProfileImage(updates.profileImage);
    }
    
    // Utiliser la m√©thode h√©rit√©e de BaseRepository (avec validation automatique)
    const updatedDoctor = await this.update(doctorId, processedUpdates, userId);
    
    console.log('‚úÖ M√©decin mis √† jour V2:', doctorId);
    return updatedDoctor;
  }

  /**
   * Supprimer un m√©decin
   * @param {string} doctorId - ID du m√©decin
   * @param {string} userId - ID de l'utilisateur (pour le cache)
   * @returns {Promise<void>}
   */
  async deleteDoctor(doctorId, userId = null) {
    console.log('üë®‚Äç‚öïÔ∏è Suppression m√©decin V2:', doctorId);
    
    // Utiliser la m√©thode h√©rit√©e de BaseRepository
    await this.delete(doctorId, userId);
    
    console.log('‚úÖ M√©decin supprim√© V2:', doctorId);
  }

  /**
   * S'abonner aux changements des m√©decins en temps r√©el
   * @param {string} userId - ID de l'utilisateur
   * @param {Function} callback - Fonction appel√©e lors des changements
   * @returns {Function} Fonction pour arr√™ter l'√©coute
   */
  subscribeToDoctors(userId, callback) {
    console.log('üî• subscribeToDoctors V2 pour userId:', userId);
    
    // Utiliser la m√©thode h√©rit√©e de BaseRepository avec tri personnalis√©
    return this.subscribe(userId, (doctors) => {
      // Tri sp√©cifique aux m√©decins
      const sortedDoctors = doctors.sort((a, b) => (a.name || '').localeCompare(b.name || ''));
      
      console.log('üî• M√©decins temps r√©el V2:', sortedDoctors.length);
      callback(sortedDoctors);
    });
  }

  /**
   * Traiter et redimensionner une image de profil
   * @param {File} file - Fichier image √† traiter
   * @returns {Promise<string>} Image redimensionn√©e en base64
   */
  async processProfileImage(file) {
    return new Promise((resolve, reject) => {
      console.log('üîß D√©but redimensionnement image de profil');
      console.log('üìÇ Fichier:', file.name, 'Taille:', file.size, 'bytes');
      
      try {
        Resizer.imageFileResizer(
          file,                    // fichier image
          1024,                    // largeur max
          1024,                    // hauteur max
          'JPEG',                  // format de compression
          80,                      // qualit√© (0-100)
          0,                       // rotation (0¬∞)
          (resizedImage) => {      // callback de succ√®s
            console.log('‚úÖ Redimensionnement r√©ussi');
            console.log('üì¶ Taille finale:', resizedImage.length, 'chars');
            
            // V√©rifier la taille finale
            const sizeInBytes = (resizedImage.length * 3) / 4;
            if (sizeInBytes > 100 * 1024) { // 100KB max
              reject(new Error('L\'image est trop volumineuse m√™me apr√®s compression'));
              return;
            }
            
            resolve(resizedImage);
          },
          'base64',                // type de sortie
          200,                     // largeur min
          200                      // hauteur min
        );
      } catch (error) {
        console.error('‚ùå Erreur lors du redimensionnement:', error);
        reject(new Error(`Erreur lors du redimensionnement: ${error.message}`));
      }
    });
  }

  /**
   * Obtenir les phases de traitement disponibles
   * @returns {Array} Liste des phases
   */
  getTreatmentPhases() {
    return [
      { id: 1, name: 'Phase 1 - Pr√©paration', description: 'Examens et pr√©paration' },
      { id: 2, name: 'Phase 2 - Traitement', description: 'Traitement principal' },
      { id: 3, name: 'Phase 3 - Finalisation', description: 'Finition et suivi' }
    ];
  }

  /**
   * Valider les donn√©es d'un m√©decin (m√©thode publique pour compatibilit√©)
   * @param {Object} doctorData - Donn√©es √† valider
   * @returns {Object} R√©sultat de la validation
   */
  validateDoctor(doctorData) {
    // Utiliser le sch√©ma de validation int√©gr√©
    return this.schema.validate(doctorData);
  }

  /**
   * Rechercher des m√©decins par nom
   * @param {string} userId - ID de l'utilisateur
   * @param {string} searchTerm - Terme de recherche
   * @returns {Promise<Array>} M√©decins correspondants
   */
  async searchDoctors(userId, searchTerm) {
    console.log('üîç Recherche m√©decins V2:', searchTerm);
    
    if (!searchTerm || searchTerm.trim().length < 2) {
      return [];
    }
    
    // R√©cup√©rer tous les m√©decins et filtrer c√¥t√© client
    // Note: Pour une vraie recherche full-text, utiliser Algolia ou similaire
    const allDoctors = await this.getDoctors(userId);
    
    const searchTermLower = searchTerm.toLowerCase();
    const filteredDoctors = allDoctors.filter(doctor => {
      const name = doctor.name?.toLowerCase() || '';
      return name.includes(searchTermLower);
    });
    
    console.log('‚úÖ M√©decins trouv√©s V2:', filteredDoctors.length);
    return filteredDoctors;
  }

  /**
   * Obtenir les m√©decins par phase de traitement
   * @param {string} userId - ID de l'utilisateur
   * @param {number} phase - Phase de traitement (1, 2, ou 3)
   * @returns {Promise<Array>} M√©decins de cette phase
   */
  async getDoctorsByPhase(userId, phase) {
    console.log('üîç M√©decins par phase V2:', phase);
    
    const allDoctors = await this.getDoctors(userId);
    const doctorsByPhase = allDoctors.filter(doctor => 
      doctor.treatmentPhases && doctor.treatmentPhases.includes(phase)
    );
    
    console.log('‚úÖ M√©decins phase', phase, ':', doctorsByPhase.length);
    return doctorsByPhase;
  }

  /**
   * Obtenir les statistiques des m√©decins
   * @param {string} userId - ID de l'utilisateur
   * @returns {Promise<Object>} Statistiques
   */
  async getDoctorsStats(userId) {
    console.log('üìä Statistiques m√©decins V2');
    
    const doctors = await this.getDoctors(userId);
    
    const stats = {
      total: doctors.length,
      byPhase: {
        phase1: doctors.filter(d => d.treatmentPhases?.includes(1)).length,
        phase2: doctors.filter(d => d.treatmentPhases?.includes(2)).length,
        phase3: doctors.filter(d => d.treatmentPhases?.includes(3)).length
      },
      withProfileImage: doctors.filter(d => d.profileImage).length,
      recentlyAdded: doctors.filter(d => {
        const dayAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);
        return d.createdAt > dayAgo;
      }).length
    };
    
    console.log('‚úÖ Statistiques calcul√©es V2:', stats);
    return stats;
  }

  /**
   * Exporter les m√©decins au format JSON
   * @param {string} userId - ID de l'utilisateur
   * @returns {Promise<string>} JSON des m√©decins
   */
  async exportDoctors(userId) {
    console.log('üì§ Export m√©decins V2');
    
    const doctors = await this.getDoctors(userId);
    
    // Nettoyer les donn√©es pour l'export (supprimer les images base64)
    const exportData = doctors.map(doctor => ({
      id: doctor.id,
      name: doctor.name,
      treatmentPhases: doctor.treatmentPhases,
      createdAt: doctor.createdAt,
      updatedAt: doctor.updatedAt
    }));
    
    const jsonData = JSON.stringify(exportData, null, 2);
    console.log('‚úÖ Export termin√© V2:', exportData.length, 'm√©decins');
    
    return jsonData;
  }
}

// Exporter une instance unique du service
export default new DoctorsServiceV2();

// Exporter aussi la classe pour les tests
export { DoctorsServiceV2 };