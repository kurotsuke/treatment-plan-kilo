/**
 * Service pour transformer les devis en plans de traitement via Gemini
 */
import { getVisionModel, isGeminiConfigured } from '../config/gemini.js';

/**
 * G√©n√®re un plan de traitement dentaire en appelant l'API Gemini
 * @param {object} inputData - Les donn√©es d'entr√©e contenant medecins_par_phase et liste_actes
 * @returns {Promise<Array>} Plan de traitement au format JSON Kibo Gantt
 */
export async function generateDentalTreatmentPlan(inputData) {
  console.log('ü§ñ D√©but de la g√©n√©ration du plan de traitement avec Gemini');
  console.log('üìä Donn√©es d\'entr√©e:', inputData);

  // V√©rifier si l'API est configur√©e
  if (!isGeminiConfigured()) {
    throw new Error('Cl√© API Gemini non configur√©e. Veuillez la configurer dans les param√®tres.');
  }

  // Le prompt d√©taill√© avec toutes les r√®gles
  const promptTemplate = `
R√¥le et Objectif :
Tu es un assistant expert en planification de traitements dentaires. Ton r√¥le est de prendre des donn√©es structur√©es sur les actes √† r√©aliser et de les transformer en un plan de traitement chronologique au format JSON, destin√© √† un composant de diagramme de Gantt.

Format des Donn√©es d'Entr√©e :
Tu recevras les informations sous la forme de deux objets JSON.

R√®gles de G√©n√©ration du JSON :
1. Ordre de Traitement :
   - Tu dois traiter les actes en respectant imp√©rativement l'ordre num√©rique des phases : tous les actes de la "1 - Phase de soins" d'abord, puis ceux de la "2 - Phase fonctionnelle et orthodontie", et enfin ceux de la "3 - Phase esth√©tique".
   - Au sein de chaque phase, tu dois appliquer la logique clinique pour ordonner les actes (ex: un d√©tartrage avant tout, une extraction avant la pose d'un implant, une prise d'empreinte avant la pose d'une couronne).

2. Attribution du M√©decin (owner) :
   - Pour chaque acte, v√©rifie s'il poss√®de une propri√©t√© "medecin". Si oui, utilise sa valeur pour "owner.name".
   - Sinon, utilise le nom du m√©decin par d√©faut de la phase correspondante.
   - Pour les t√¢ches de "Cicatrisation", assigne-les au "Patient".

3. Gestion des D√©lais (Cicatrisation et Laboratoire) :
   - Cicatrisation : Apr√®s une extraction ou la pose d'un implant, cr√©e une t√¢che distincte. Dur√©e post-extraction : 3 semaines. Dur√©e post-implant : 4 mois.
   - Laboratoire : Pour les couronnes ou facettes, incorpore un d√©lai de 10 √† 14 jours ouvr√©s en d√©calant la date de d√©but de la "Pose" par rapport √† la "Prise d'empreinte". N'ajoute pas de t√¢che visible pour le laboratoire.

4. Structure du JSON de Sortie :
   - Le r√©sultat final DOIT √™tre un tableau d'objets JSON respectant scrupuleusement cette structure :
   {
     "id": "un identifiant unique de type UUID",
     "name": "un nom clair et concis pour l'√©tape",
     "startAt": "la date de d√©but calcul√©e au format ISO 8601",
     "endAt": "la date de fin calcul√©e au format ISO 8601",
     "status": { "id": "status-planned", "name": "Planned", "color": "#6B7280" },
     "owner": { "id": "owner-X", "name": "Nom du m√©decin calcul√©", "image": "" },
     "group": { "id": "group-X", "name": "Nom de la phase extraite des donn√©es" },
     "product": null, "initiative": null, "release": null
   }

Mise en application :
G√©n√®re maintenant le tableau JSON complet en te basant sur les donn√©es d'entr√©e ci-dessous. Le plan de traitement doit commencer le 1er juillet 2025. Assure-toi que la sortie est uniquement le tableau JSON, sans texte ou formatage suppl√©mentaire comme \`\`\`json.
`;

  // Construction du prompt final en injectant les donn√©es sp√©cifiques
  const fullPrompt = `
    ${promptTemplate}

    Donn√©es d'entr√©e :
    \`\`\`json
    ${JSON.stringify(inputData, null, 2)}
    \`\`\`
  `;

  try {
    console.log('üöÄ Envoi de la requ√™te √† Gemini...');
    console.log('üìè Taille du prompt:', fullPrompt.length, 'caract√®res');
    
    const aiModel = getVisionModel();
    console.log('üîß Mod√®le AI configur√©:', aiModel ? 'OK' : 'ERREUR');
    
    const result = await aiModel.generateContent(fullPrompt);
    console.log('üì° R√©sultat re√ßu de Gemini:', result ? 'OK' : 'VIDE');
    
    const response = await result.response;
    console.log('üìã R√©ponse extraite:', response ? 'OK' : 'VIDE');
    
    let text = response.text();
    console.log('üìù R√©ponse brute de Gemini (longueur:', text?.length || 0, '):', text);

    // V√©rifier si la r√©ponse est vide
    if (!text || text.trim().length === 0) {
      throw new Error('Gemini a renvoy√© une r√©ponse vide. V√©rifiez votre cl√© API et votre quota.');
    }

    // Nettoyage de la r√©ponse pour s'assurer qu'elle est un JSON pur
    text = text.trim().replace(/^```json\n/, '').replace(/\n```$/, '');
    console.log('üßπ Texte nettoy√© (longueur:', text.length, '):', text.substring(0, 200) + '...');

    // V√©rifier si le texte nettoy√© est vide
    if (text.length === 0) {
      throw new Error('Apr√®s nettoyage, la r√©ponse de Gemini est vide.');
    }

    // Parser le JSON
    const ganttData = JSON.parse(text);
    
    console.log('‚úÖ Plan de traitement g√©n√©r√© avec succ√®s:', ganttData.length, 't√¢ches');
    return ganttData;

  } catch (error) {
    console.error('‚ùå Erreur lors de la requ√™te √† l\'API Gemini:', error);
    console.error('üîç Type d\'erreur:', error.constructor.name);
    console.error('üìÑ Message d\'erreur:', error.message);
    
    // Fournir des messages d'erreur plus sp√©cifiques
    if (error.message.includes('API key')) {
      throw new Error('Cl√© API Gemini invalide. V√©rifiez votre configuration.');
    } else if (error.message.includes('quota')) {
      throw new Error('Quota API Gemini d√©pass√©. Attendez ou v√©rifiez votre plan.');
    } else if (error.message.includes('JSON')) {
      throw new Error('Gemini a renvoy√© une r√©ponse mal format√©e. R√©essayez.');
    } else {
      throw new Error(`La g√©n√©ration du plan de traitement a √©chou√©: ${error.message}`);
    }
  }
}

/**
 * Transforme un devis en format d'entr√©e pour Gemini
 * @param {object} quote - Le devis √† transformer
 * @returns {object} Donn√©es format√©es pour Gemini
 */
export function mapQuoteToGeminiInput(quote) {
  console.log('üîÑ Transformation du devis en format Gemini:', quote.quoteNumber);
  
  const medecins_par_phase = {};
  const liste_actes = [];
  
  // Mapper les phases et leurs m√©decins
  quote.phases.forEach(phase => {
    // Normaliser le nom de la phase pour correspondre au format attendu
    let phaseName = phase.name;
    if (phaseName.includes('Phase 1') || phaseName.includes('urgence') || phaseName.includes('soins')) {
      phaseName = "1 - Phase de soins";
    } else if (phaseName.includes('Phase 2') || phaseName.includes('fonctionnelle') || phaseName.includes('orthodontie')) {
      phaseName = "2 - Phase fonctionnelle et orthodontie";
    } else if (phaseName.includes('Phase 3') || phaseName.includes('esth√©tique')) {
      phaseName = "3 - Phase esth√©tique";
    }
    
    // Assigner le m√©decin de la phase
    const doctorName = phase.doctor?.name || quote.referringDoctor?.name || 'Dr. Inconnu';
    medecins_par_phase[phaseName] = doctorName;
    
    // Mapper les traitements de la phase
    phase.treatments.forEach(treatment => {
      liste_actes.push({
        phase: phaseName,
        nom: treatment.name,
        medecin: treatment.hasCustomDoctor ? treatment.doctor?.name : undefined,
        dents: treatment.teeth ? treatment.teeth.split(',').map(t => t.trim()).filter(t => t) : [],
        duree_estimee: treatment.sessions || 1
      });
    });
  });
  
  const result = { medecins_par_phase, liste_actes };
  console.log('‚úÖ Transformation termin√©e:', result);
  return result;
}

/**
 * Valide les donn√©es d'un plan de traitement g√©n√©r√©
 * @param {Array} ganttData - Les donn√©es du plan de traitement
 * @returns {boolean} True si valide
 */
export function validateGanttData(ganttData) {
  if (!Array.isArray(ganttData)) {
    throw new Error('Le plan de traitement doit √™tre un tableau');
  }
  
  ganttData.forEach((task, index) => {
    if (!task.id || !task.name || !task.startAt || !task.endAt) {
      throw new Error(`T√¢che ${index + 1} incompl√®te: propri√©t√©s manquantes`);
    }
    
    if (!task.status || !task.owner || !task.group) {
      throw new Error(`T√¢che ${index + 1} incompl√®te: objets status/owner/group manquants`);
    }
    
    // Valider les dates
    const startDate = new Date(task.startAt);
    const endDate = new Date(task.endAt);
    
    if (isNaN(startDate.getTime()) || isNaN(endDate.getTime())) {
      throw new Error(`T√¢che ${index + 1}: dates invalides`);
    }
    
    if (endDate < startDate) {
      throw new Error(`T√¢che ${index + 1}: date de fin ant√©rieure √† la date de d√©but`);
    }
  });
  
  return true;
}

/**
 * Transforme les donn√©es Gantt pour les adapter au format des composants existants
 * @param {Array} ganttData - Donn√©es Gantt de Gemini
 * @returns {object} Donn√©es format√©es pour les composants Gantt
 */
export function adaptGanttDataForComponents(ganttData) {
  console.log('üîß Adaptation des donn√©es Gantt pour les composants');
  
  const tasks = ganttData.map(task => ({
    id: task.id,
    name: task.name,
    startAt: new Date(task.startAt),
    endAt: new Date(task.endAt),
    status: task.status,
    owner: task.owner,
    phase: task.group?.name || 'Non d√©fini',
    progression: 0 // Nouveau plan, progression √† 0
  }));
  
  // Grouper par phase pour cr√©er les milestones
  const phaseGroups = {};
  tasks.forEach(task => {
    const phase = task.phase;
    if (!phaseGroups[phase]) {
      phaseGroups[phase] = [];
    }
    phaseGroups[phase].push(task);
  });
  
  // Cr√©er des jalons pour chaque phase
  const milestones = Object.entries(phaseGroups).map(([phaseName, phaseTasks]) => {
    const phaseEndDate = new Date(Math.max(...phaseTasks.map(t => t.endAt.getTime())));
    return {
      id: `milestone-${phaseName.toLowerCase().replace(/\s+/g, '-')}`,
      date: phaseEndDate,
      label: `Fin ${phaseName}`
    };
  });
  
  console.log('‚úÖ Adaptation termin√©e:', tasks.length, 't√¢ches,', milestones.length, 'jalons');
  
  return {
    tasks,
    milestones,
    patient: null, // Sera d√©fini lors de la sauvegarde
    statistics: null // Sera calcul√© automatiquement
  };
}